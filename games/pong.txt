;
; V0 
; V1
; V2
; V3
; V4
; V5
; V6 - ball x coordinate
; V7 - ball y coordinate
; V8 - ball x movement
; V9 - ball y movement
; VA - left racket x
; VB - left racket y
; VC - right racket x
; VD - right racket y
; VE - scores for both players (see below)
; VF
;


; scores for both players are stored in VE
; (left player score is multiplied by 10)
; i.e. if VE contains 14 it means left player has 1 and right player has 4

0x200: 0x6a02 LD VA, 0x02     ; draw the rackets
0x202: 0x6b0c LD VB, 0x0c     ;
0x204: 0x6c3f LD VC, 0x3f     ;
0x206: 0x6d0c LD VD, 0x0c     ;
0x208: 0xa2ea LD I, 0x2ea     ;
0x20a: 0xdab6 DRW VA, VB, 0x6 ;
0x20c: 0xdcd6 DRW VC, VD, 0x6 ;
0x20e: 0x6e00 LD VE, 0x00
0x210: 0x22d4 CALL 0x2d4      ; call DISPLAYSCORE
0x212: 0x6603 LD V6, 0x03
0x214: 0x6802 LD V8, 0x02
0x216: 0x6060 LD V0, 0x60     ; WAIT: stay idle for 0x60 cycles
0x218: 0xf015 LD DT, V0       ;
0x21a: 0xf007 LD V0, DT       ;
0x21c: 0x3000 SE V0, 0x00     ;
0x21e: 0x121a JMP 0x21a       ;
0x220: 0xc717 RND V7, 0x17    ; pick random start y for the ball
0x222: 0x7708 ADD V7, 0x08    ; at the beginning the ball goes up
0x224: 0x69ff LD V9, 0xff     ;
0x226: 0xa2f0 LD I, 0x2f0     ; draw the ball
0x228: 0xd671 DRW V6, V7, 0x1 ;
0x22a: 0xa2ea LD I, 0x2ea     ; LOOP: erase racket sprites
0x22c: 0xdab6 DRW VA, VB, 0x6 ;
0x22e: 0xdcd6 DRW VC, VD, 0x6 ;
0x230: 0x6001 LD V0, 0x01     ; read inputs, move and draw left racket
0x232: 0xe0a1 SKNP V0         ;
0x234: 0x7bfe ADD VB, 0xfe    ;
0x236: 0x6004 LD V0, 0x04     ;
0x238: 0xe0a1 SKNP V0         ;
0x23a: 0x7b02 ADD VB, 0x02    ;
0x23c: 0x601f LD V0, 0x1f     ;
0x23e: 0x8b02 AND VB, V0      ;
0x240: 0xdab6 DRW VA, VB, 0x6 ;
0x242: 0x600c LD V0, 0x0c     ; read inputs, move and draw right racket
0x244: 0xe0a1 SKNP V0         ;
0x246: 0x7dfe ADD VD, 0xfe    ;
0x248: 0x600d LD V0, 0x0d     ;
0x24a: 0xe0a1 SKNP V0         ;
0x24c: 0x7d02 ADD VD, 0x02    ;
0x24e: 0x601f LD V0, 0x1f     ;
0x250: 0x8d02 AND VD, V0      ;
0x252: 0xdcd6 DRW VC, VD, 0x6 ;
0x254: 0xa2f0 LD I, 0x2f0     ; erase ball sprite
0x256: 0xd671 DRW V6, V7, 0x1 ;
0x258: 0x8684 ADD V6, V8      ; move the ball
0x25a: 0x8794 ADD V7, V9      ;
0x25c: 0x603f LD V0, 0x3f     ;
0x25e: 0x8602 AND V6, V0      ;
0x260: 0x611f LD V1, 0x1f     ;
0x262: 0x8712 AND V7, V1      ;
0x264: 0x4602 SNE V6, 0x02    ; skip next if V6 != 2
0x266: 0x1278 JMP 0x278       ; we hit left border, jump to LEFT BORDER
0x268: 0x463f SNE V6, 0x3f    ; skip next if V6 != 0x3f
0x26a: 0x1282 JMP 0x282       ; we hit right border, jump to RIGHT BORDER
0x26c: 0x471f SNE V7, 0x1f    ; skip next if V7 != 0x1f
0x26e: 0x69ff LD V9, 0xff     ; we hit bottom border, now ball goes up
0x270: 0x4700 SNE V7, 0x00    ; skip next if V7 != 0
0x272: 0x6901 LD V9, 0x01     ; we hit top border, now ball goes down
0x274: 0xd671 DRW V6, V7, 0x1 ; draw the ball
0x276: 0x122a JMP 0x22a       ; jump to LOOP
0x278: 0x6802 LD V8, 0x02     ; LEFT BORDER: ball now goes right
0x27a: 0x6301 LD V3, 0x01     ; set V3 to 1 (right player score increase)
0x27c: 0x8070 LD V0, V7       ; load ball y coordinate in V0
0x27e: 0x80b5 SUB V0, VB      ; ball y coordinate - left racket y coordinate
0x280: 0x128a JMP 0x28a
0x282: 0x68fe LD V8, 0xfe     ; RIGHT BORDER: ball now goes left
0x284: 0x630a LD V3, 0x0a     ; set V3 to 10 (left player score increase)
0x286: 0x8070 LD V0, V7       ; load ball y coordinate in V0   
0x288: 0x80d5 SUB V0, VD      ; ball y coordinate - right racket y coordinate
0x28a: 0x3f01 SE VF, 0x01     ; skip next if ball is higher than racket
0x28c: 0x12a2 JMP 0x2a2       ; ball was higher than racket, jmp to SCORE
0x28e: 0x6102 LD V1, 0x02
0x290: 0x8015 SUB V0, V1
0x292: 0x3f01 SE VF, 0x01
0x294: 0x12ba JMP 0x2ba
0x296: 0x8015 SUB V0, V1
0x298: 0x3f01 SE VF, 0x01
0x29a: 0x12c8 JMP 0x2c8
0x29c: 0x8015 SUB V0, V1
0x29e: 0x3f01 SE VF, 0x01
0x2a0: 0x12c2 JMP 0x2c2
0x2a2: 0x6020 LD V0, 0x20     ; SCORE: buzz for 20 cycles
0x2a4: 0xf018 LD ST, V0       ;
0x2a6: 0x22d4 CALL 0x2d4      ; erase score sprites
0x2a8: 0x8e34 ADD VE, V3      ; increase players scores
0x2aa: 0x22d4 CALL 0x2d4      ; draw score sprites
0x2ac: 0x663e LD V6, 0x3e     ; reposition the ball to the right
0x2ae: 0x3301 SE V3, 0x01     ; skip next if right player scored
0x2b0: 0x6603 LD V6, 0x03     ; reposition the ball to the left
0x2b2: 0x68fe LD V8, 0xfe     ; ball should go left
0x2b4: 0x3301 SE V3, 0x01     ; skip next if right player scored
0x2b6: 0x6802 LD V8, 0x02     ; ball should go right
0x2b8: 0x1216 JMP 0x216       ; jump to WAIT
0x2ba: 0x79ff ADD V9, 0xff    ; 
0x2bc: 0x49fe SNE V9, 0xfe
0x2be: 0x69ff LD V9, 0xff
0x2c0: 0x12c8 JMP 0x2c8
0x2c2: 0x7901 ADD V9, 0x01
0x2c4: 0x4902 SNE V9, 0x02
0x2c6: 0x6901 LD V9, 0x01
0x2c8: 0x6004 LD V0, 0x04     ; buzz for 4 cycles
0x2ca: 0xf018 LD ST, V0
0x2cc: 0x7601 ADD V6, 0x01    ; 
0x2ce: 0x4640 SNE V6, 0x40    ;
0x2d0: 0x76fe ADD V6, 0xfe    ;
0x2d2: 0x126c JMP 0x26c
0x2d4: 0xa2f2 LD I, 0x2f2     ; DISPLAYSCORE: function to display score
0x2d6: 0xfe33 LD B, VE        ; store BCD representation of VE at addresses 0x2f2, 0x2f3 and 0x2f4
0x2d8: 0xf265 LD V2, [I]      ; copy values at addresses 0x2f2, 0x2f3 and 0x2f4 to V0, V1 and V2
0x2da: 0xf129 LD F, V1        ; set I to location of digit sprite for value in V1
0x2dc: 0x6414 LD V4, 0x14     ; left score x coordinate
0x2de: 0x6500 LD V5, 0x00     ; scores y coordinate
0x2e0: 0xd455 DRW V4, V5, 0x5 ; draw left score
0x2e2: 0x7415 ADD V4, 0x15    ; right score x coordinate
0x2e4: 0xf229 LD F, V2        ; set I to location of digit sprite for value in V2
0x2e6: 0xd455 DRW V4, V5, 0x5 ; draw right score
0x2e8: 0x00ee RET             ; DISPLAYSCORE end
0x2ea: 0x8080 LD V0, V8       ; racket sprite
0x2ec: 0x8080 LD V0, V8       ;
0x2ee: 0x8080 LD V0, V8       ;
0x2f0: 0x8000 LD V0, V0       ; ball sprite
